---
// Simple Topbar placeholder hosting login/logout and theme toggle proxy
interface Props { title?: string }
const { title = 'PKC' } = Astro.props as Props;
---

<nav class="w-full bg-[var(--surface)]/80 backdrop-blur supports-[backdrop-filter]:bg-[color-mix(in_oklab,var(--surface)_85%,transparent)] border-b border-black/5 dark:border-white/10">
  <div class="w-full px-4 py-3 flex items-center justify-between gap-3">
    <div class="flex items-center gap-3">
      <div class="size-8 rounded bg-black/5 dark:bg-white/10 grid place-items-center font-semibold">PKC</div>
      <span class="text-sm sm:text-base font-medium opacity-80">{title}</span>
    </div>

    <div class="flex items-center gap-2">
      <button id="btnLogin" class="px-3 py-1.5 text-sm rounded-md border border-black/10 dark:border-white/10 hover:bg-black/5 dark:hover:bg-white/10">Login</button>
      <button id="btnLogout" class="px-3 py-1.5 text-sm rounded-md border border-black/10 dark:border-white/10 hover:bg-black/5 dark:hover:bg-white/10">Logout</button>
      <button id="btnThemeToggle" class="px-3 py-1.5 text-sm rounded-md border border-black/10 dark:border-white/10 hover:bg-black/5 dark:hover:bg-white/10" title="Toggle theme">ðŸŒ“</button>
    </div>
  </div>
</nav>

<script is:inline>
  (function(){
    const q = (id) => document.getElementById(id);
    const loginBtn = q('btnLogin');
    const logoutBtn = q('btnLogout');
    const themeBtn = q('btnThemeToggle');

    // --- Auth state handling (simple localStorage flag) ---
    const AUTH_KEY = 'pkc_auth_token';
    const isLoggedIn = () => !!localStorage.getItem(AUTH_KEY);
    const renderAuth = () => {
      const logged = isLoggedIn();
      if (loginBtn) loginBtn.classList.toggle('hidden', logged);
      if (logoutBtn) logoutBtn.classList.toggle('hidden', !logged);
    };
    // Initial render
    document.addEventListener('DOMContentLoaded', renderAuth);
    // Respond to cross-tab changes
    window.addEventListener('storage', (e) => { if (e.key === AUTH_KEY) renderAuth(); });

    if (loginBtn) loginBtn.addEventListener('click', () => {
      // In a real app, redirect to Auth; here we simulate by setting a token
      localStorage.setItem(AUTH_KEY, '1');
      window.dispatchEvent(new CustomEvent('app-login'));
      renderAuth();
    });
    if (logoutBtn) logoutBtn.addEventListener('click', () => {
      localStorage.removeItem(AUTH_KEY);
      window.dispatchEvent(new CustomEvent('app-logout'));
      renderAuth();
    });

    // --- Theme toggle (directly manage theme here) ---
    const THEME_KEY = 'theme';
    const applyInitialTheme = () => {
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      const saved = localStorage.getItem(THEME_KEY);
      const initial = saved || (prefersDark ? 'dark' : 'light');
      document.documentElement.classList.toggle('dark-theme', initial === 'dark');
    };
    document.addEventListener('DOMContentLoaded', applyInitialTheme);

    if (themeBtn) themeBtn.addEventListener('click', () => {
      const isDark = document.documentElement.classList.toggle('dark-theme');
      localStorage.setItem(THEME_KEY, isDark ? 'dark' : 'light');
    });
  })();
  </script>
